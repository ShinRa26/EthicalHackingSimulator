using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EthicalHackingSimulator
{
    /// <summary>
    /// Subclass of MSExploit representing a Reverse Shell Exploit
    /// </summary>
    public class MSExploit_Reverse_Shell : MSExploit
    {
        private string personalIP { get; set; }
        private const int PORT = 4040;

        //Inherited Constructor
        public MSExploit_Reverse_Shell(string name) : base(name)
        {
            personalIP = PersonalIP();
        }

        //Creates the Reverse TCP Shell exploit.
        public override void Create()
        {
            Console.WriteLine("Creating reverse shell script for target...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Setting IP address to relay back to: {0}", personalIP);
            System.Threading.Thread.Sleep(500);
            Console.WriteLine("Setting listening port: {0}", PORT);
            System.Threading.Thread.Sleep(500);
            Console.WriteLine("Done!\n\nCreating reverse shell script for attacker...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Setting IP to listen on: {0}", personalIP);
            System.Threading.Thread.Sleep(750);
            Console.WriteLine("Setting listening port: {0}", PORT);
            System.Threading.Thread.Sleep(750);
            Console.WriteLine("\nDone!\n");

            OptionalRootkit();

            Console.WriteLine("Converting to executable...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Compiling...\n");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Reverse TCP Shell exploit successfully created and awaiting deployment!\n");

        }

        //Deploys the exploit onto the given target
        public override void Deploy(Target t, int port)
        {
            string service = "";

            try
            {
                service = t.portsAndServices[port];
            }
            catch (Exception)
            {
                Console.WriteLine("That is not a valid port number.\n");
                return;
            }

            Console.WriteLine("Gathering necessary files...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Deploying {0} to {1} {2} service on port {3}...", this.name, t.ipAddress, service, port);
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Success!\n");
            System.Threading.Thread.Sleep(2000);

            t.deployedExploit = this;

            Results();
        }

        //Observes the results of the exploit
        public override void Results()
        {
            int waitTime = 5;
            Console.WriteLine("Executing script...\n");
            System.Threading.Thread.Sleep(4000);

            for (int i = 0; i < waitTime; i++)
            {
                Console.WriteLine("Awaiting connection...");
                System.Threading.Thread.Sleep(1000);
            }

            Console.WriteLine("\nConnection initiated!");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Target connecting to {0}. Listening on port {1}...", personalIP, PORT);
            System.Threading.Thread.Sleep(1500);
            Console.WriteLine("Connection established.\n");
            Console.WriteLine("Exploit successful! Remote connection through reverse shell achieved.");
        }

        //Generates an IP address for the user's machine (Only to be used in the exploit)
        private string PersonalIP()
        {
            string ip = "";
            Random r = new Random();

            int first, second, third, fourth;

            first = r.Next(1, 255);
            second = r.Next(0, 255);
            third = r.Next(0, 255);
            fourth = r.Next(0, 255);

            ip = first + "." + second + "." + third + "." + fourth;

            return ip;
        }
    }
}
