using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EthicalHackingSimulator
{
    /// <summary>
    /// Subclass of MSExploit to represent an arbitrary file upload exploit.
    /// </summary>
    public class MSExploit_File_Upload : MSExploit
    {
        public string type { get; private set; }
        private string fileName { get; set; }
        public string wormServer {get; private set;}

        //Inherited Constructor
        public MSExploit_File_Upload(string name) : base(name)
        {
            type = "";
            fileName = "SneakyScript.exe";
            wormServer = "";
        }

        //Creates the Arbitrary File Upload Exploit.
        public override void Create()
        {
            while(true)
            {
                Console.Write("What type of malicious file would you like to create? (Virus/Worm/Trojan) ");
                string fileType = Console.ReadLine();

                //Creates a Virus type exploit
                if(fileType == "virus" || fileType == "Virus")
                {
                    type = fileType;
                    CreateVirus();
                    return;
                }

                //Creates a Worm type exploit
                else if(fileType == "worm" || fileType == "Worm")
                {
                    type = fileType;
                    CreateWorm();
                    return;
                }

                //Creates a Trojan type exploit
                else if(fileType == "trojan" || fileType == "Trojan")
                {
                    type = fileType;
                    CreateTrojan();
                    return;
                }

                //Type does not exist
                else
                {
                    Console.WriteLine("That is not a valid file type.\n");
                    return;
                }
            }
        }

        //Deploys the exploit onto the given target
        public override void Deploy(Target t, int port)
        {
            string service = "";

            //Attempts to parse the port number
            try
            {
                service = t.portsAndServices[port];
            }
            catch (Exception)
            {
                Console.WriteLine("That is not a valid port number.\n");
                return;
            }

            Console.WriteLine("Gathering necessary files...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Deploying {0} to {1} {2} service on port {3}...", this.name, t.ipAddress, service, port);
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Success!\n");
            System.Threading.Thread.Sleep(2000);

            t.deployedExploit = this;

            Results();
        }

        //Observes the results of the exploit
        public override void Results()
        {
            if (type == "virus" || type == "Virus")
            {
                VirusResults();
            }
            else if(type == "worm" || type == "Worm")
            {
                WormResults();
            }
            else if(type == "trojan" || type == "Trojan")
            {
                TrojanResults();
            }
        }

        //Creates a virus type
        private void CreateVirus()
        {
            char[] drives = { 'C', 'D', 'F', 'G', 'H' };

            Console.WriteLine("Type: Timebomb - Crucial File Deletion");
            Console.WriteLine("Preparing virus payload...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Designating filepaths...\n");
            System.Threading.Thread.Sleep(3000);
            
            for(int i = 0; i < drives.Length; i++)
            {
                Console.WriteLine("Filepath: {0}:\\windows\\system32\\config\\system", drives[i]);
                System.Threading.Thread.Sleep(750);
            }

            Console.WriteLine("Writing file deletion script...");
            System.Threading.Thread.Sleep(1500);
            Console.WriteLine("Writing privelege escalation script...\n");
            System.Threading.Thread.Sleep(3000);
            OptionalRootkit();

            Console.WriteLine("Compiling...");           
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("\nWrapping payload in executable file...\n");
            System.Threading.Thread.Sleep(1000);
            Console.WriteLine("Executable created: {0}", fileName);
            Console.WriteLine("Virus file upload exploit successfully created and awaiting deployment!\n");            
        }

        //Creates a worm type
        private void CreateWorm()
        {
            Console.WriteLine("Type: Timebomb - Bandwith Consumption");
            Console.WriteLine("Network Propagation Method: Email List");
            Console.WriteLine("Preparing worm payload...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Creating script to obtain email address list...");
            System.Threading.Thread.Sleep(3000);

            wormServer = DownloadServerIP();
            Console.WriteLine("Obtaining Download Server IP...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Download server: {0}\n", wormServer);

            Console.WriteLine("Creating script to connect to the remote download server...");
            System.Threading.Thread.Sleep(3000);

            OptionalRootkit();

            Console.WriteLine("Compiling...");            
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("\nWrapping payload in executable file...");
            System.Threading.Thread.Sleep(1000);
            Console.WriteLine("Executable created: {0}", fileName);

            Console.WriteLine("Worm file upload exploit successfully created and awaiting deployment!\n");

        }

        //Creates a trojan type
        private void CreateTrojan()
        {
            Console.WriteLine("Type: Timebomb - Keylogger");
            Console.WriteLine("Preparing trojan payload...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Creating script for key capture...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Setting up remote transfer of captured data...");
            System.Threading.Thread.Sleep(3000);

            OptionalRootkit();

            fileName = "InnocuousProgram.exe";
            Console.WriteLine("Compiling...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("\nWrapping scripts into an executable...");
            System.Threading.Thread.Sleep(1000);
            Console.WriteLine("Executable Created: {0}", fileName);

            Console.WriteLine("Trojan file upload exploit successfully created and awaiting deployment!\n");
        }

        //Results for the virus type
        private void VirusResults()
        {
            string[] dllFiles =
            {
                "user32.dll",
                "ntdll.dll",
                "ntoskrnl.exe",
                "user32.dll",
                "system32.dll",
                "hal.dll"
            };

            int timebombThreshold = 3;
            for(int i = 0; i < timebombThreshold; i++)
            {
                Console.WriteLine("Waiting for timebomb threshold to be met...");
                System.Threading.Thread.Sleep(2500);
            }

            Console.WriteLine("Threshold met!\nExecuting payload...\n");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Escalating system priveleges...");
            System.Threading.Thread.Sleep(1000);
            Console.WriteLine("Searching filepaths for system32...");
            System.Threading.Thread.Sleep(1500);
            Console.WriteLine("Located! Suppressing warnings...\n");
            System.Threading.Thread.Sleep(1000);

            for(int i = 0; i < dllFiles.Length; i++)
            {
                Console.WriteLine("Deleting file: {0}", dllFiles[i]);
                System.Threading.Thread.Sleep(1000);
            }

            Console.WriteLine("\nTesting system responsiveness...");
            System.Threading.Thread.Sleep(4000);
            Console.WriteLine("Warning! System unresponsive: \\windows\\system32\\config\\system missing or corrupted.\n");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Exploit successful! System is corrupted/non-functional.\n");
        }

        //Results for the Worm type
        private void WormResults()
        {
            Random r = new Random();

            int download = r.Next(25, 250);
            int upload = r.Next(10, 40);

            int threshold = 4;
            for(int i = 0; i < threshold; i++)
            {
                Console.WriteLine("Waiting for timebomb threshold to be met...");
                System.Threading.Thread.Sleep(3000);
            }

            Console.WriteLine("Threshold met! \nExecuting payload...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Connecting to remote download server: {0}", wormServer);
            System.Threading.Thread.Sleep(1500);
            Console.WriteLine("Connected!\nDownloading files in background.\n");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Gathering email addresses...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Mass emailing worm...\n");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Success!\nTesting bandwith consumption...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("\nDownload: {0}MB/s\tUpload: {1}KB/s\n", download, upload);

            Console.WriteLine("Exploit successful! Download bottlenecking bandwith.\n");
        }

        //Results for the Trojan Type
        private void TrojanResults()
        {
            int threshold = 2;
            int waitTime = 5;

            for(int i = 0; i < threshold; i++)
            {
                Console.WriteLine("Waiting for user to open file...");
                System.Threading.Thread.Sleep(2000);
            }

            Console.WriteLine("\nFile opened! \nActivating keylogger...");
            System.Threading.Thread.Sleep(1000);
            Console.WriteLine("Keylogger active!");

            for(int i = 0; i < waitTime; i++)
            {
                Console.WriteLine("Awaiting user input...");
                System.Threading.Thread.Sleep(3000);
            }

            Console.WriteLine("Keys logged. Sending results...");
            System.Threading.Thread.Sleep(2000);

            string loggedKeys = KeyloggedMessage();
            Console.WriteLine("\nResults: {0}\n", loggedKeys);

            Console.WriteLine("Trojan keylogger exploit successful! Successfully logged keystrokes from user.\n");
        }

        //Creates a random IP address for the Worm exploit
        private string DownloadServerIP()
        {
            string ip = "";
            Random r = new Random();            
            int first, second, third, fourth;

            first = r.Next(1, 255);
            second = r.Next(0, 255);
            third = r.Next(0, 255);
            fourth = r.Next(0, 255);

            ip = first + "." + second + "." + third + "." + fourth;

            return ip;
        }

        //Message the trojan keylogger has captured
        private string KeyloggedMessage()
        {
            string keyloggedMessage = "ToSpacewhomSpaceitSpacemaySpaceconcern,NewLineOurSpacesecuritySpaceisSpacelax,SpacepleaseSpaceaddressSpacethis.NewLineNewLineregards,NewLineConcernedSpaceEmployee";
            return keyloggedMessage;
        }
    }
}
