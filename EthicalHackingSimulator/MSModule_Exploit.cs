using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EthicalHackingSimulator
{
    public class MSModule_Exploit : ITerminal
    {
        private ExploitDB exDB;
        private MSExploit createdExploit { get; set; }

        public MSModule_Exploit(ExploitDB exDB)
        {
            this.exDB = exDB;
            this.createdExploit = null;
        }

        //Exploit Module console
        public void Terminal()
        {
            string tag = "msf exploit > ";
            char[] splitDelimiters = { ' ' };

            LaunchText();

            while (true)
            {               
                Console.Write(tag);
                string input = Console.ReadLine();

                //Returns to the Megsploit Framework console
                if(input == "back")
                {
                    Console.WriteLine("Quitting Module: Exploit Module...\n");
                    System.Threading.Thread.Sleep(1000);
                    break;
                }

                //Creates an exploit, depending on given input
                else if(input == "create")
                {
                    string exploitName = GetExploitName();

                    if(exploitName != null)
                    {
                        Console.WriteLine("Well Done!");
                        //FIX
                    }
                }

                //Else, Invalid command
                else
                {
                    Console.WriteLine("That is not a valid command.\n");
                }
            }
        }

        //Prompts the user for the name of the exploit they wish to create, depending on input
        private string GetExploitName()
        {
            System.Threading.Thread.Sleep(500);
            Console.Write("What exploit do you wish to create? ");
            string exName = Console.ReadLine();

            bool valid = ValidateExploit(exName);

            if (valid)
            {
                Console.WriteLine("Initialising creation of {0} exploit...\n", exName);
                return exName;
            }
            else
            {
                Console.WriteLine("That is not a valid exploit name.\n");
                return null;
            }
        }

        //Validates the exploit name
        private bool ValidateExploit(string exName)
        {
            var exploitList = exDB.exploits;
            bool valid = false;
            
            for (int i = 0; i < exploitList.Count; i++)
            {
                if(exName == exploitList[i])
                {
                    valid = true;
                    break;
                }
            }

            return valid;
        }

        //Loading Text
        private void LaunchText()
        {
            Console.WriteLine("Launching Module: Exploit Module...\n");
            System.Threading.Thread.Sleep(1000);
        }

        //Prints the Exploit Module Help Menu
        public void PrintHelp()
        {
            Console.WriteLine("Printing Exploit Module Help menu...\n");
        }
    }
}
