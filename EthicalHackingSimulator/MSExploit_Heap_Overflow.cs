using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EthicalHackingSimulator
{
    public class MSExploit_Heap_Overflow : MSExploit
    {
        public MSExploit_Heap_Overflow(string name) : base(name) { }

        //Creates the DoS Heap overflow exploit
        public override void Create()
        {
            Console.WriteLine("Assessing overflow type...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Heap overflow detected!");
            System.Threading.Thread.Sleep(1250);
            Console.WriteLine("Type: Denial of Service.\nCreating pointer manipulation script...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("\nDone!\n");

            OptionalRootkit();

            Console.WriteLine("Compiling...\n");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Heap overflow exploit successfully created and awaiting deployment!\n");
        }

        //Deploys the exploit onto the given target
        public override void Deploy(Target t, int port)
        {
            string service = "";

            try
            {
                service = t.portsAndServices[port];
            }
            catch(Exception)
            {
                Console.WriteLine("That is not a valid port number.\n");
                return;
            }

            Console.WriteLine("Gathering necessary files...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Deploying {0} to {1} {2} service on port {3}...", this.name, t.ipAddress, service, port);
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Success!\n");
            System.Threading.Thread.Sleep(2000);

            t.deployedExploit = this;

            Results();
        }

        //Observes the results of the exploit
        public override void Results()
        {
            Console.WriteLine("Executing script...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Attempting to corrupt dynamically allocated Heap memory...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Overwriting dynamic memory allocation linkage...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Exchanging pointers...");
            System.Threading.Thread.Sleep(2000);
            Console.WriteLine("Overwriting key program function pointers...");
            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("Pointers overwritten!\nTesting program responsiveness...\n");
            System.Threading.Thread.Sleep(5000);

            for(int i = 0; i < 5; i++)
            {
                Console.WriteLine("Warning! Program offline!");
                System.Threading.Thread.Sleep(500);
            }

            System.Threading.Thread.Sleep(3000);
            Console.WriteLine("\nExploit successful! Program has became unresponsive!\n");
        }
    }
}
