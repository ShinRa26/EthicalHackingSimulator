using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EthicalHackingSimulator
{
    //TODO Reevaluate, considering dictionaries
    public class ExploitDB
    {
        private List<string> services { get; set; }
        public List<string> exploits { get; private set; }
        private Dictionary<string,string> servicesAndExploits { get; set; } 

        public ExploitDB()
        {
            servicesAndExploits = MatchServiceToExploit();
        }

        //Searches the dictionary for the Service and corresponding exploit
        public void SearchService(string service)
        {
            bool found = false;

            //Checks for empty input or a space
            if (service == "" || service == " ")
            {
                Console.WriteLine("You must enter a search term!\n");
                return;
            }

            Console.WriteLine("Searching...");
            System.Threading.Thread.Sleep(2500);

            Console.WriteLine("\nSearch results for {0}:", service);

            foreach (KeyValuePair<string, string> kvp in servicesAndExploits)
            {
                if (service == kvp.Key)
                {
                    if (kvp.Value == "None")
                    {
                        Console.WriteLine("No exploit available for service: {0}.", service);
                        found = true;
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Exploit available for {0} service: {1}.", service, kvp.Value);
                        found = true;
                        break;
                    }
                }

                else
                    continue;
            }

            if(!found)
                Console.WriteLine("No service found for \"{0}\".\n", service); 
            else
                Console.WriteLine();              
        }

        //Searches the dictionary for the exploit and corresponding vulnerable services
        public void SearchExploit(string exploit)
        {
            bool found = false;

            //Checks for empty input or a space
            if (exploit == "" || exploit == " ")
            {
                Console.WriteLine("You must enter a search term!\n");
                return;
            }

            Console.WriteLine("Searching...");
            System.Threading.Thread.Sleep(2500);

            Console.WriteLine("\nSearch results for {0}:", exploit);

            foreach(KeyValuePair<string, string> kvp in servicesAndExploits)
            {
                if(exploit == kvp.Value)
                {
                    found = true;
                    Console.WriteLine("{0} exploit found for {1} service.",exploit, kvp.Key);
                }
            }

            if(!found)
                Console.WriteLine("\nNo exploit found for {0}.\n", exploit);
            else
                Console.WriteLine();
        }

        //Populates the Services list with the available services
        private List<string> PopulateServices()
        {
            var sl = new List<string>();

            sl.Add("MailChimp");
            sl.Add("MySQL_Database");
            sl.Add("Web_Server");
            sl.Add("File_Server");
            sl.Add("Drupal_System");
            sl.Add("Magneto");
            sl.Add("Apache3");
            sl.Add("AG_Antivirus");

            return sl;
        }

        //Populates the Exploit List with Exploits
        private List<string> PopulateExploits()
        {
            var ex = new List<string>();
            ex.Add("Buffer_Overflow"); //[0]
            ex.Add("SQL_Injection"); //[1]
            ex.Add("Reverse_TCP_Shell"); //[2]
            ex.Add("Arbitrary_File_Upload"); //[3]
            ex.Add("DoS_Heap_Overflow"); //[4]
            ex.Add("Remote_Shellcode_Execution"); //[5]

            return ex;
        }

        //Matches the service to a more accurate exploit
        private Dictionary<string, string> MatchServiceToExploit()
        {
            services = PopulateServices();
            exploits = PopulateExploits();
            var d = new Dictionary<string, string>();

            int chance;
            Random r = new Random();

            //Mailchimp
            chance = r.Next(0, 3);
            if (chance == 0 || chance == 1)
                d[services[0]] = exploits[0]; //Buffer Overflow
            else
                d[services[0]] = "None";

            //MySQL
            chance = r.Next(0, 4);
            if (chance == 0 || chance == 1 || chance == 2)
                d[services[1]] = exploits[1]; //SQL Injection
            else
                d[services[1]] = "None";

            //WebServer
            chance = r.Next(0, 3);
            if (chance == 0)
                d[services[2]] = exploits[0]; //Buffer Overflow
            else if (chance == 1)
                d[services[2]] = exploits[3]; //Arbitrary File Upload
            else
                d[services[2]] = "None";

            //Drupal
            chance = r.Next(0, 3);
            if (chance == 0 || chance == 1)
                d[services[3]] = exploits[3]; //Arbitrary File Upload
            else
                d[services[3]] = "None";

            //Magneto
            chance = r.Next(0, 3);
            if (chance == 0 || chance == 1)
                d[services[4]] = exploits[0]; //Buffer Overflow
            else
                d[services[4]] = "None";

            //Apache3
            chance = r.Next(0, 2);
            if (chance == 0)
                d[services[5]] = exploits[5];//Remote Shellcode Execution
            else
                d[services[5]] = "None";

            //File Server
            chance = r.Next(0, 3);
            if (chance == 0)
                d[services[6]] = exploits[3]; //Arbitrary File Upload
            else if (chance == 1)
                d[services[6]] = exploits[2]; //Reverse TCP
            else
                d[services[6]] = "None";

            //AG Antivirus
            chance = r.Next(0, 3);
            if (chance == 0 || chance == 1)
                d[services[7]] = exploits[4]; //DoS - Heap Overflow
            else
                d[services[7]] = "None";

            return d;
            
        }

        /**********[DEPRACTED]**********/
        //Randomly selects exploit for service if service is found        
        private void RandomSearch(string s)
        {
            //Bool for finding the result
            bool found = false;

            //Scanning EDB
            Console.WriteLine("\nScanning ExploitDB for {0} exploit...", s);
            System.Threading.Thread.Sleep(3000);

            //Loops through the service list for the given string
            for(int i = 0; i < services.Count; i++)
            {
                Random r = new Random();

                //If the service is found, print out on the screen that it's found, along with the exploit name
                if(s == services[i])
                {
                    found = true;

                    //Random number used to pick the exploit
                    int pickExploit = r.Next(0, exploits.Count - 1);

                    //Says that an exploit exists for the found service (Random exploit given)
                    Console.WriteLine("\nExploit found for {0} service: {1}\n", services[i], exploits[pickExploit]);
                    break;
                }
            }

            if(!found)
                Console.WriteLine("\nNo exploit found for {0} service.\n", s);
        }

        //Help menu
        //TODO Add new info
        public void Help()
        {
            string edb1 = "\nExploit Database: Database containing a list of available exploits for a host of services.";
            string edb2 = " Query the database with a service or exploit to see what services are vulnerable.\n";
            string edb = edb1 + edb2;

            string usage1 = "\nUsage:\nedb {search type} {service/exploit name}\n";
            string usage2 = "\nSearch Types:\n\tservice: Enter a service name to check for vulnerabilities.\n";
            string usage3 = "\texploit: Enter an exploit name to check for services vulnerable to this exploit.\n";
            string edbUsage = usage1 + usage2 + usage3;

            string exInfo1 = "\nExtra Info:\nThis is a simplified simulation of a database which holds available exploits for specific services.\n";
            string exInfo2 = "The exploits provided are a broad overview of specific exploits which in reality, would be more specific for a given service.\n";
            string exInfo3 = "For a real-world equivalent showing more detailed exploits, please see the real Exploit Database website.\n";
            string exInfo4 = "Website: https://www.exploit-db.com\n";
            string exInfo = exInfo1 + exInfo2 + exInfo3 + exInfo4;

            string help = edb + edbUsage + exInfo;
            Console.WriteLine(help);
        }
    }
}
